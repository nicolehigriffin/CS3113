
#ifdef _WINDOWS
#include <GL/glew.h>
#endif
#include <SDL.h>
#define GL_GLEXT_PROTOTYPES 1
#include <SDL_opengl.h>
#include <SDL_image.h>

#include "ShaderProgram.h"
#include "glm/mat4x4.hpp"
#include "glm/gtc/matrix_transform.hpp"

#ifdef _WINDOWS
#define RESOURCE_FOLDER ""
#else
#define RESOURCE_FOLDER "NYUCodebase.app/Contents/Resources/"
#endif

SDL_Window* displayWindow;

int main(int argc, char *argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 360, SDL_WINDOW_OPENGL);
    SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
    SDL_GL_MakeCurrent(displayWindow, context);
    
    glViewport(0, 0, 640, 360);
    
    ShaderProgram program;
    program.Load("vertex.glsl", "fragment.glsl");
    
    glm::mat4 projectionMatrix = glm::mat4(1.0f);
    glm::mat4 viewMatrix = glm::mat4(1.0f);
    
    glm::mat4 leftPaddleMatrix = glm::mat4(1.0f); //left paddle
    leftPaddleMatrix = glm::translate(leftPaddleMatrix, glm::vec3(-1.65f, 0.0f, 0.0f));
    leftPaddleMatrix = glm::scale(leftPaddleMatrix, glm::vec3(0.1f,0.5f,1.0f));
    
    glm::mat4 rightPaddleMatrix = glm::mat4(1.0f); //right paddle
    rightPaddleMatrix = glm::translate(rightPaddleMatrix, glm::vec3(1.65f, 0.0f, 0.0f));
    rightPaddleMatrix = glm::scale(rightPaddleMatrix, glm::vec3(0.1f,0.5f,1.0f));
    
    glm::mat4 ballMatrix = glm::mat4(1.0f); //ball
    ballMatrix = glm::scale(ballMatrix, glm::vec3(0.1f,0.1f,1.0f));
    
    projectionMatrix = glm::ortho(-1.777f, 1.777f, -1.0f, 1.0f, -1.0f, 1.0f);
    
    glUseProgram(program.programID);
    
    float lastFrameTicks = 0.0f;
    
    float leftPaddlePos = 0.0f;
    float rightPaddlePos = 0.0f;
    float ballPos[] = {0.0f,0.0f};
    
    const Uint8 *keys = SDL_GetKeyboardState(NULL);
    bool spaceWasPressed = false;
    bool hitLeft = false;
    bool hitRight = false;
    bool hitTop = false;
    bool hitBottom = false;
    
#ifdef _WINDOWS
    glewInit();
#endif
    
    SDL_Event event;
    bool done = false;
    while (!done) {
        
        float ticks = (float)SDL_GetTicks()/1000.0f;
        float elapsed = ticks - lastFrameTicks;
        lastFrameTicks = ticks;
        
        if (event.key.keysym.scancode == SDL_SCANCODE_SPACE) {
            spaceWasPressed = true;
        }
        
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
                done = true;
            } else if (event.type == SDL_KEYDOWN) { //if any key pressed down
                //for left paddle
                if (keys[SDL_SCANCODE_S]) {
                    if (leftPaddlePos > -1.0f) {
                        leftPaddleMatrix = glm::mat4(1.0f);
                        leftPaddlePos -= elapsed*60.0f;
                        leftPaddleMatrix = glm::translate(leftPaddleMatrix, glm::vec3(-1.65f, leftPaddlePos, 0.0f));
                        leftPaddleMatrix = glm::scale(leftPaddleMatrix, glm::vec3(0.1f,0.5f,1.0f));
                    }
                }
                if (keys[SDL_SCANCODE_W]) {
                    if (leftPaddlePos < 1.0f) {
                        leftPaddleMatrix = glm::mat4(1.0f);
                        leftPaddlePos += elapsed*60.0f;
                        leftPaddleMatrix = glm::translate(leftPaddleMatrix, glm::vec3(-1.65f, leftPaddlePos, 0.0f));
                        leftPaddleMatrix = glm::scale(leftPaddleMatrix, glm::vec3(0.1f,0.5f,1.0f));
                    }
                }
                //for right paddle
                if (keys[SDL_SCANCODE_DOWN]) {
                    if (rightPaddlePos > -1.0f) {
                        rightPaddleMatrix = glm::mat4(1.0f);
                        rightPaddlePos -= elapsed*60.0f;
                        rightPaddleMatrix = glm::translate(rightPaddleMatrix, glm::vec3(1.65f, rightPaddlePos, 0.0f));
                        rightPaddleMatrix = glm::scale(rightPaddleMatrix, glm::vec3(0.1f,0.5f,1.0f));
                    }
                }
                if (keys[SDL_SCANCODE_UP]) {
                    if (rightPaddlePos < 1.0f) {
                        rightPaddleMatrix = glm::mat4(1.0f);
                        rightPaddlePos += elapsed*60.0f;
                        rightPaddleMatrix = glm::translate(rightPaddleMatrix, glm::vec3(1.65f, rightPaddlePos, 0.0f));
                        rightPaddleMatrix = glm::scale(rightPaddleMatrix, glm::vec3(0.1f,0.5f,1.0f));
                    }
                }
            }
        }
        
        glClear(GL_COLOR_BUFFER_BIT);
        
        program.SetProjectionMatrix(projectionMatrix);
        program.SetViewMatrix(viewMatrix);
        
        float xDirection;
        float yDirection;
    
        if (!spaceWasPressed) {
            //this will always occur first because spacebar not pressed in beginning
            xDirection = -(sqrt(3)/2)*elapsed*0.8f;
            yDirection = -(sqrt(1)/2)*elapsed*0.8f;
        } else {
        //to begin game spacebar needs to be pressed
            
            ballMatrix = glm::mat4(1.0f);
            
            if (ballPos[1] < -1.0f) {
                //move up
                hitTop = true;
                hitBottom = false;
                hitLeft = false;
                hitRight = false;
            }
            if (ballPos[1] > 1.0f) {
                hitBottom = true;
                hitTop = false;
                hitLeft = false;
                hitRight = false;
            }
            if (hitTop) {
                //move down
                xDirection = -(sqrt(3)/2)*elapsed*0.8f;
                yDirection = (sqrt(1)/2)*elapsed*0.8f;
            }
            if (hitBottom) {
                xDirection = (sqrt(3)/2)*elapsed*0.8f;
                yDirection = -(sqrt(1)/2)*elapsed*0.8f;
            }
            
            float leftBallDistance[] = {abs(-1.65f-ballPos[0]) - (0.1f+0.1f)/2,
                                        abs(leftPaddlePos-ballPos[1]) - (0.5f+0.1f)/2};
            float rightBallDistance[] = {abs(1.65f-ballPos[0]) - (0.1f+0.1f)/2,
                                         abs(rightPaddlePos-ballPos[1]) - (0.5f+0.1f)/2};
            
            if (leftBallDistance[0] < 0 && leftBallDistance[1] < 0) {
                hitLeft = true;
                hitRight = false;
                hitTop = false;
                hitBottom = false;
            }
            if (rightBallDistance[0] < 0 && rightBallDistance[1] < 0) {
                hitRight = true;
                hitLeft = false;
                hitTop = false;
                hitBottom = false;
            }
            if (hitLeft) {
                xDirection = (sqrt(3)/4)*elapsed*0.8f;
                yDirection = (sqrt(1)/2)*elapsed*0.8f;
            }
            if (hitRight) {
                xDirection = -(sqrt(3)/4)*elapsed*0.8f;
                yDirection = -(sqrt(1)/2)*elapsed*0.8f;
            }
            
            ballPos[0] += xDirection;
            ballPos[1] += yDirection;
            
            ballMatrix = glm::translate(ballMatrix, glm::vec3(ballPos[0], ballPos[1], 0.0f));
            ballMatrix = glm::scale(ballMatrix, glm::vec3(0.1f, 0.1f, 1.0f));
            
            if (ballPos[0] > 2.0f) {
                std::cout << "LEFT PLAYER WINS!" << std::endl;
                done = true;
            }
            if (ballPos[0] < -2.0f) {
                std::cout << "RIGHT PLAYER WINS!" << std::endl;
                done = true;
            }
        }
        
        program.SetModelMatrix(leftPaddleMatrix);
        float leftVertices[] = {-0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5};
        glVertexAttribPointer(program.positionAttribute, 2, GL_FLOAT, false, 0, leftVertices);
        glEnableVertexAttribArray(program.positionAttribute);
        glDrawArrays(GL_TRIANGLES, 0, 6);
        glDisableVertexAttribArray(program.positionAttribute);
        
        program.SetModelMatrix(rightPaddleMatrix);
        float rightVertices[] = {-0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5};
        glVertexAttribPointer(program.positionAttribute, 2, GL_FLOAT, false, 0, rightVertices);
        glEnableVertexAttribArray(program.positionAttribute);
        glDrawArrays(GL_TRIANGLES, 0, 6);
        glDisableVertexAttribArray(program.positionAttribute);
        
        program.SetModelMatrix(ballMatrix);
        float ballVertices[] = {-0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5};
        glVertexAttribPointer(program.positionAttribute, 2, GL_FLOAT, false, 0, ballVertices);
        glEnableVertexAttribArray(program.positionAttribute);
        glDrawArrays(GL_TRIANGLES, 0, 6);
        glDisableVertexAttribArray(program.positionAttribute);
        
        SDL_GL_SwapWindow(displayWindow);
    }
    
    SDL_Quit();
    return 0;
}
