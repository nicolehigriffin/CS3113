#ifdef _WINDOWS
#include <GL/glew.h>
#endif
#include <SDL.h>
#define GL_GLEXT_PROTOTYPES 1
#include <SDL_opengl.h>
#include <SDL_image.h>
#include <SDL_mixer.h>

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#define FIXED_TIMESTEP 0.0166666f
#define MAX_TIMESTEPS 6

#include "ShaderProgram.h"
#include "glm/mat4x4.hpp"
#include "glm/gtc/matrix_transform.hpp"

#include <vector>
#include <string>

#ifdef _WINDOWS
#define RESOURCE_FOLDER ""
#else
#define RESOURCE_FOLDER "NYUCodebase.app/Contents/Resources/"
#endif

SDL_Window* displayWindow;
using namespace std;

class SheetSprite {
public:
    SheetSprite() {}
    SheetSprite(unsigned int textureID, int index, int spriteCountX,
                int spriteCountY, float size) : textureID(textureID), size(size) {
        u = (float)(((int)index) % spriteCountX) / (float)spriteCountX;
        v = (float)(((int)index) / spriteCountX) / (float)spriteCountY;
        width = 1.0/(float)spriteCountX;
        height = 1.0/(float)spriteCountY;
    }
    void Draw(ShaderProgram &program) {
        glBindTexture(GL_TEXTURE_2D, textureID);
        
        GLfloat texCoords[] = {
            u, v+height,
            u+width, v,
            u,v,
            u+width, v,
            u, v+height,
            u+width, v+height
        };
        
        float aspect = width/height;
        float vertices[] = {
            -0.5f * size * aspect, -0.5f * size,
            0.5f * size * aspect, 0.5f * size,
            -0.5f * size * aspect, 0.5f  * size,
            0.5f * size * aspect, 0.5f * size,
            -0.5f * size * aspect, -0.5f * size,
            0.5f * size * aspect, -0.5f * size
        };
        
        glVertexAttribPointer(program.positionAttribute, 2, GL_FLOAT, false, 0, vertices);
        glEnableVertexAttribArray(program.positionAttribute);
        
        glVertexAttribPointer(program.texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
        glEnableVertexAttribArray(program.texCoordAttribute);
        
        glDrawArrays(GL_TRIANGLES, 0, 6);
        glDisableVertexAttribArray(program.positionAttribute);
        glDisableVertexAttribArray(program.texCoordAttribute);
    }
    
    float size;
    unsigned int textureID;
    float u;
    float v;
    float width;
    float height;
};

float lerp(float v0, float v1, float t) {
    return (1.0-t)*v0 + t*v1;
}

class Entity {
public:
    Entity(const string& name) : name(name) {}
    
    void Update() {
        modelMatrix = glm::mat4(1.0f);
        modelMatrix = glm::translate(modelMatrix, glm::vec3(positionX, positionY, 0.0f));
        modelMatrix = glm::scale(modelMatrix, size);
    }
    
    void Draw(ShaderProgram program) {
        sprite.Draw(program);
    }
    
    string name;
    
    float positionX;
    float positionY;
    float width;
    float height;
    float rotation;
    
    int textureID;
    
    float velocityX;
    float velocityY;
    
    float accelerationX = 0.0f;
    float accelerationY = -0.1f; //gravity
    
    glm::vec3 size;
    
    glm::mat4 modelMatrix;
    
    SheetSprite sprite;
    
    bool isStatic;
    
    bool collidedTop;
    bool collidedBottom;
    bool collidedLeft;
    bool collidedRight;
};

GLuint LoadTexture(const char *filePath) {
    int w,h,comp;
    unsigned char* image = stbi_load(filePath, &w,  &h, &comp, STBI_rgb_alpha);
    
    if(image == NULL) {
        cout << "Unable to load image. Make sure the path is correct\n";
        assert(false);
    }
    
    GLuint retTexture;
    glGenTextures(1, &retTexture);
    
    glBindTexture(GL_TEXTURE_2D, retTexture);
    
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, image);
    
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    
    stbi_image_free(image);
    return retTexture;
}

void createEntity(const string& name, vector<Entity*>& entities) {
    Entity* entity = new Entity(name);
    entities.push_back(entity);
}

//----- MAIN -----//
int main(int argc, char *argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 360, SDL_WINDOW_OPENGL);
    SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
    SDL_GL_MakeCurrent(displayWindow, context);
    Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 4096);
    
    glViewport(0, 0, 640, 360);
    
    ShaderProgram program;
    program.Load("vertex.glsl", "fragment.glsl");
    program.Load("vertex_textured.glsl", "fragment_textured.glsl");
    
    glm::mat4 projectionMatrix = glm::mat4(1.0f);
    glm::mat4 viewMatrix = glm::mat4(1.0f);
    
    vector<Entity*> entities;
    createEntity("player1", entities); //alien
    createEntity("player2", entities); //alien
    createEntity("startPlat", entities); //platformsprites
    createEntity("endPlat", entities); //platformsprites
    
    createEntity("exit", entities); //platformsprites
    createEntity("lava0", entities); //wallsprites
    createEntity("lava1", entities); //wallsprites
    createEntity("lava2", entities); //wallsprites
    createEntity("ceiling0", entities); //wallsprites
    createEntity("ceiling1", entities); //wallsprites
    createEntity("ceiling2", entities); //wallsprites
    
    unsigned int spriteSheet1 = LoadTexture("aliens.png");
    unsigned int spriteSheet2 = LoadTexture("platforms_sprites.png");
    unsigned int spriteSheet3 = LoadTexture("wall_sprites.jpg");
    
    unsigned int spriteSheetTitle = LoadTexture("cavealiens.png");
    unsigned int spriteSheet2Player = LoadTexture("2player.png");
    unsigned int spriteSheetBlue = LoadTexture("bluewins.png");
    unsigned int spriteSheetGreen = LoadTexture("greenwins.png");
    unsigned int spriteSheetTryAgain = LoadTexture("tryagain.png");
    
    //MODEL MATRICES TEXT
    vector<Entity*> text;
    createEntity("cavealiens", text);
    text[0]->positionX = 0.0f;
    text[0]->positionY = 0.5f;
    text[0]->sprite = SheetSprite(spriteSheetTitle, 1, 1, 1, 1);
    createEntity("2player", text);
    text[1]->positionX = 0.0f;
    text[1]->positionY = -0.5f;
    text[1]->sprite = SheetSprite(spriteSheet2Player, 1, 1, 1, 1);
    createEntity("bluewins", text);
    text[2]->positionX = 0.0f;
    text[2]->positionY = 0.0f;
    text[2]->sprite = SheetSprite(spriteSheetBlue, 1, 1, 1, 1);
    createEntity("greenwins", text);
    text[3]->positionX = 0.0f;
    text[3]->positionY = 0.0f;
    text[3]->sprite = SheetSprite(spriteSheetGreen, 1, 1, 1, 1);
    createEntity("tryagain", text);
    text[4]->positionX = 0.0f;
    text[4]->positionY = 0.0f;
    text[4]->sprite = SheetSprite(spriteSheetTryAgain, 1, 1, 1, 1);
    for (size_t i = 0; i < text.size(); i++) {
        text[i]->size = glm::vec3(3.0f, 1.0f, 0.0f);
        text[i]->Update();
    }
    
    //MODEL MATRICES ENTITIES
    float lavaPos = 0.0f;
    float ceilingPos = 0.0f;
    for (size_t i = 0; i < entities.size(); i++) {
        if (entities[i]->name == "startPlat") {
            entities[i]->isStatic = false;
            entities[i]->positionX = -1.5f;
            entities[i]->positionY = -0.6f;
            entities[i]->size = glm::vec3(0.5f, 0.5f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet2, 9, 11, 13, 1);
        } else if (entities[i]->name == "endPlat") {
            entities[i]->isStatic = false;
            entities[i]->positionX = 1.5f;
            entities[i]->positionY = -0.6f;
            entities[i]->size = glm::vec3(0.5f, 0.5f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet2, 9, 11, 13, 1);
        } else if (entities[i]->name  == "player1") { //player
            entities[i]->isStatic = false;
            entities[i]->positionX = -1.5f;
            entities[i]->positionY = -0.2f;
            entities[i]->size = glm::vec3(0.3f, 0.3f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet1, 34, 12, 8, 1);
        } else if (entities[i]->name  == "player2") { //player
            entities[i]->isStatic = false;
            entities[i]->positionX = -1.5f;
            entities[i]->positionY = -0.2f;
            entities[i]->size = glm::vec3(0.3f, 0.3f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet1, 82, 12, 8, 1);
        } else if (entities[i]->name == "exit") { //exit sign
            entities[i]->isStatic = true;
            entities[i]->positionX = 1.5f;
            entities[i]->positionY = -0.2f;
            entities[i]->size = glm::vec3(0.3f, 0.35f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet2, 59, 11, 13, 1);
        } else if (entities[i]->name.size() == 5) { //lava
            entities[i]->isStatic = false;
            entities[i]->positionX = -0.8f + lavaPos;
            entities[i]->positionY = -1.1f; //startPosY is -1.1f
            entities[i]->size = glm::vec3(0.65f, 1.0f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet3, 35, 8, 10, 1);
            lavaPos += 0.8f;
        } else if (entities[i]->name.size() == 8) { //ceiling
            entities[i]->isStatic = false;
            entities[i]->positionX = -1.0f + ceilingPos;
            entities[i]->positionY = 1.0f; //startPosY is 1.0f
            entities[i]->size = glm::vec3(0.3f, 1.0f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet3, 60, 8, 10, 1);
            ceilingPos += 1.0;
        }
        entities[i]->Update();
    }
    
    Mix_Chunk *hit;
    hit = Mix_LoadWAV("getHit.wav");
    
    Mix_Chunk *checkpoint;
    checkpoint = Mix_LoadWAV("checkpoint.wav");
    
    Mix_Music *music;
    music = Mix_LoadMUS("Cold_Survival_Music.mp3");
    Mix_PlayMusic(music, -1);
    
    projectionMatrix = glm::ortho(-1.777f, 1.777f, -1.0f, 1.0f, -1.0f, 1.0f);
    
    glUseProgram(program.programID);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    
    float lastFrameTicks = 0.0f;
    
    const Uint8 *keys = SDL_GetKeyboardState(NULL);
    
    float accumulator = 0.0f;
    bool startGone = false;
    int hitNoise = 0;
    bool player2active = false;
    bool level1 = false;
    bool level2 = false;
    bool level3 = false;
    bool startNewLevel = false;
    int player1count = 0;
    int player2count = 0;
    
    string mode = "STATE_MAIN_MENU";
    //modes: main_menu, levels, gameOver, player1wins, player2wins
    
#ifdef _WINDOWS
    glewInit();
#endif
    
    SDL_Event event;
    bool done = false;
    while (!done) {
        float ticks = (float)SDL_GetTicks()/1000.0f;
        float elapsed = ticks - lastFrameTicks;
        lastFrameTicks = ticks;
        elapsed += accumulator;
        if(elapsed < FIXED_TIMESTEP) {
            accumulator = elapsed;
            continue;
        }
        while(elapsed >= FIXED_TIMESTEP) {
            elapsed -= FIXED_TIMESTEP;
        }
        accumulator = elapsed;
    
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
                done = true;
            } else if (event.key.keysym.scancode == SDL_SCANCODE_SPACE) {
                if (mode == "STATE_MAIN_MENU") {
                    level1 = true;
                    startNewLevel = true;
                    mode = "STATE_LEVELS";
                }
            } else if (event.key.keysym.scancode == SDL_SCANCODE_Q) {
                done = true;
            } else if (event.key.keysym.scancode == SDL_SCANCODE_2) {
                if (mode == "STATE_MAIN_MENU") {
                    player2active = true;
                }
            }
        }
        if (event.type == SDL_KEYDOWN) {
            if (mode == "STATE_LEVELS") {
                //player1
                if (keys[SDL_SCANCODE_A]) {
                    if (entities[0]->positionX > -1.5f) {
                        entities[0]->positionX -= elapsed*30.0f;
                        entities[0]->Update();
                    }
                }
                if (keys[SDL_SCANCODE_D]) {
                    if (entities[0]->positionX < 1.5f) {
                        entities[0]->positionX += elapsed*30.0f;
                        entities[0]->Update();
                    }
                }
                if (keys[SDL_SCANCODE_W]) {
                    entities[0]->velocityY += 0.3f;
                    entities[0]->positionY += elapsed*entities[0]->velocityY;
                    entities[0]->Update();
                    startGone = true;
                }
                if (player2active) {
                    if (keys[SDL_SCANCODE_LEFT]) {
                        if (entities[1]->positionX > -1.5f) {
                            entities[1]->positionX -= elapsed*30.0f;
                            entities[1]->Update();
                        }
                    }
                    if (keys[SDL_SCANCODE_RIGHT]) {
                        if (entities[1]->positionX < 1.5f) {
                            entities[1]->positionX += elapsed*30.0f;
                            entities[1]->Update();
                        }
                    }
                    if (keys[SDL_SCANCODE_UP]) {
                        entities[1]->velocityY += 0.3f;
                        entities[1]->positionY += elapsed*entities[1]->velocityY;
                        entities[1]->Update();
                        startGone = true;
                    }
                }
            }
        }
        
        if (entities[0]->velocityX > 0) {
            entities[0]->velocityX -= 0.01f;
        } else if (entities[0]->velocityX < 0) {
            entities[0]->velocityX += 0.01f;
        }
        if (entities[1]->velocityX > 0) {
            entities[1]->velocityX -= 0.01f;
        } else if (entities[1]->velocityX < 0) {
            entities[1]->velocityX += 0.01f;
        }
        
        if (!entities[0]->collidedBottom) {
            entities[0]->velocityY += entities[0]->accelerationY;
            entities[0]->positionY += elapsed*entities[0]->velocityY;
            entities[0]->Update();
        }
        if (!entities[1]->collidedBottom) {
            entities[1]->velocityY += entities[1]->accelerationY;
            entities[1]->positionY += elapsed*entities[1]->velocityY;
            entities[1]->Update();
        }
        
        glClear(GL_COLOR_BUFFER_BIT);
        
        program.SetProjectionMatrix(projectionMatrix);
        program.SetViewMatrix(viewMatrix);
        
        if (level3) {
            viewMatrix = glm::translate(viewMatrix, glm::vec3(0.0f, -2.5*elapsed,0.0f));
        } else if (level2) {
            viewMatrix = glm::translate(viewMatrix, glm::vec3(0.0f, 1.5*elapsed,0.0f));
        }
        
        if (mode == "STATE_MAIN_MENU") {
            program.SetModelMatrix(text[0]->modelMatrix);
            text[0]->Draw(program);
            program.SetModelMatrix(text[1]->modelMatrix);
            text[1]->Draw(program);
        } else if (mode == "STATE_GAME_OVER") {
            program.SetModelMatrix(text[4]->modelMatrix);
            text[4]->Draw(program);
        } else if (mode == "STATE_PLAYER1") {
            program.SetModelMatrix(text[2]->modelMatrix);
            text[2]->Draw(program);
        } else if (mode == "STATE_PLAYER2") {
            program.SetModelMatrix(text[2]->modelMatrix);
            text[2]->Draw(program);
        } else if (mode == "STATE_LEVELS") {
            //lava and ceiling
            //rest of entities
            if (startNewLevel) {
                for (size_t i = 5; i < entities.size(); i++) {
                    program.SetModelMatrix(entities[i]->modelMatrix);
                    if (entities[i]->name.size() == 8) { //ceiling
                        if (level2) {
                            entities[i]->positionY -= 0.1f;
                        } else if (level3) {
                            entities[i]->positionY -= 0.1f;
                        }
                    }
                    if (entities[i]->name.size() == 5) { //lava
                        if (level2) {
                            entities[i]->positionY += 0.1f;
                        } else if (level3) {
                            entities[i]->positionY += 0.1f;
                        }
                    }
                    entities[i]->Update();
                }
                entities[0]->positionX = -1.5f;
                entities[0]->positionY = -0.2f;
                entities[0]->Update();
                entities[1]->positionX = -1.5f;
                entities[1]->positionY = -0.2f;
                entities[1]->Update();
                startNewLevel = false;
            }
            if (player2active) {
                program.SetModelMatrix(entities[1]->modelMatrix);
                entities[1]->Draw(program);
            }
            program.SetModelMatrix(entities[0]->modelMatrix);
            entities[0]->Draw(program);
            if (!startGone) {
                program.SetModelMatrix(entities[2]->modelMatrix);
                entities[2]->Draw(program);
            }
            for (size_t i = 3; i < entities.size(); i++) {
                program.SetModelMatrix(entities[i]->modelMatrix);
                entities[i]->Draw(program);
            }
        }
        
        if (hitNoise == 1) {
            Mix_PlayChannel(-1, hit, 0);
        }
        
        //collision
        float player1Bottom = entities[0]->positionY;
        float player2Bottom = entities[1]->positionY;
        for (size_t i = 0; i < entities.size(); i++) {
            if (entities[i]->name.size() == 5) { //lava
                float platformTop = entities[i]->positionY + 0.5f;
                if (player1Bottom < platformTop) {
                    hitNoise += 1;
                    mode = "STATE_GAME_OVER";
                }
                if (player2active) {
                    if (player2Bottom < platformTop) {
                        hitNoise += 1;
                        mode = "STATE_GAME_OVER";
                    }
                }
            }
            if (entities[i]->name.size() == 8) { //ceiling
                float platformBottom = entities[i]->positionY-0.5f;
                if ((player1Bottom > platformBottom) &&
                    (entities[0]->positionX < entities[i]->positionX+0.15f) &&
                    (entities[0]->positionX > entities[i]->positionX-0.15f)){
                    hitNoise += 1;
                    mode = "STATE_GAME_OVER";
                }
                if (player2active) {
                    if ((player2Bottom > platformBottom) &&
                        (entities[1]->positionX < entities[i]->positionX+0.15f) &&
                        (entities[1]->positionX > entities[i]->positionX-0.15f)){
                        hitNoise += 1;
                        mode = "STATE_GAME_OVER";
                    }
                }
            }
            if (entities[i]->name == "startPlat") { //platforms
                if (!startGone) {
                    float platformTop = entities[i]->positionY;
                    if (((platformTop-player1Bottom)/2 < 0) &&
                        (entities[0]->positionX < entities[i]->positionX+0.25f) &&
                        (entities[0]->positionX > entities[i]->positionX-0.25f)){
                        
                        entities[0]->velocityY = 0.0f;
                        
                        entities[0]->Update();
                        entities[0]->collidedBottom = true;
                        entities[i]->collidedTop = true;
                    } else {
                        entities[0]->collidedBottom = false;
                        entities[i]->collidedTop = false;
                    }
                    if (((platformTop-player2Bottom)/2 < 0) &&
                        (entities[1]->positionX < entities[i]->positionX+0.25f) &&
                        (entities[1]->positionX > entities[i]->positionX-0.25f)){
                        
                        entities[1]->velocityY = 0.0f;
                        
                        entities[1]->Update();
                        entities[1]->collidedBottom = true;
                        entities[i]->collidedTop = true;
                    } else {
                        entities[1]->collidedBottom = false;
                        entities[i]->collidedTop = false;
                    }
                }
            }
            if (entities[i]->name == "endPlat") { //platforms
                float platformTop = entities[i]->positionY;
                if (((platformTop-player1Bottom)/2 < 0) &&
                    (entities[0]->positionX < entities[i]->positionX+0.25f) &&
                    (entities[0]->positionX > entities[i]->positionX-0.25f)){
                    
                    player1count+= 1;
                    entities[0]->velocityY = 0.0f;
                    
                    entities[0]->Update();
                    entities[0]->collidedBottom = true;
                    entities[i]->collidedTop = true;
                    
                    if (level3) {
                        if (player2count > player1count) {
                            mode = "STATE_PLAYER2";
                        } else {
                            mode = "STATE_PLAYER1";
                        }
                    } else if (level2) {
                        level3 = true;
                        startNewLevel = true;
                        Mix_PlayChannel(-1, checkpoint, 0);
                    } else if (level1) {
                        level2 = true;
                        startNewLevel = true;
                        Mix_PlayChannel(-1, checkpoint, 0);
                    }
                } else {
                    entities[0]->collidedBottom = false;
                    entities[i]->collidedTop = false;
                }
                if (((platformTop-player2Bottom)/2 < 0) &&
                    (entities[1]->positionX < entities[i]->positionX+0.25f) &&
                    (entities[1]->positionX > entities[i]->positionX-0.25f)){
                    
                    player2count+= 1;
                    entities[1]->velocityY = 0.0f;
                    
                    entities[1]->Update();
                    entities[1]->collidedBottom = true;
                    entities[i]->collidedTop = true;
                    
                    if (level3) {
                        if (player2count > player1count) {
                            mode = "STATE_PLAYER2";
                        } else {
                            mode = "STATE_PLAYER1";
                        }
                    } else if (level2) {
                        level3 = true;
                        startNewLevel = true;
                        Mix_PlayChannel(-1, checkpoint, 0);
                    } else if (level1) {
                        level2 = true;
                        startNewLevel = true;
                        Mix_PlayChannel(-1, checkpoint, 0);
                    }
                } else {
                    entities[1]->collidedBottom = false;
                    entities[i]->collidedTop = false;
                }
            }
        }
        SDL_GL_SwapWindow(displayWindow);
    }
    Mix_FreeChunk(hit);
    Mix_FreeChunk(checkpoint);
    Mix_FreeMusic(music);
    SDL_Quit();
    return 0;
}
