#ifdef _WINDOWS
#include <GL/glew.h>
#endif
#include <SDL.h>
#define GL_GLEXT_PROTOTYPES 1
#include <SDL_opengl.h>
#include <SDL_image.h>

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#define FIXED_TIMESTEP 0.0166666f
#define MAX_TIMESTEPS 6

#include "ShaderProgram.h"
#include "glm/mat4x4.hpp"
#include "glm/gtc/matrix_transform.hpp"

#include <vector>
#include <string>

#ifdef _WINDOWS
#define RESOURCE_FOLDER ""
#else
#define RESOURCE_FOLDER "NYUCodebase.app/Contents/Resources/"
#endif

SDL_Window* displayWindow;
using namespace std;

class SheetSprite {
public:
    SheetSprite() {}
    SheetSprite(unsigned int textureID, int index, int spriteCountX,
                int spriteCountY, float size) : textureID(textureID), size(size) {
        u = (float)(((int)index) % spriteCountX) / (float)spriteCountX;
        v = (float)(((int)index) / spriteCountX) / (float)spriteCountY;
        width = 1.0/(float)spriteCountX;
        height = 1.0/(float)spriteCountY;
    }
    void Draw(ShaderProgram &program) {
        glBindTexture(GL_TEXTURE_2D, textureID);
        
        GLfloat texCoords[] = {
            u, v+height,
            u+width, v,
            u,v,
            u+width, v,
            u, v+height,
            u+width, v+height
        };
        
        float aspect = width/height;
        float vertices[] = {
            -0.5f * size * aspect, -0.5f * size,
            0.5f * size * aspect, 0.5f * size,
            -0.5f * size * aspect, 0.5f  * size,
            0.5f * size * aspect, 0.5f * size,
            -0.5f * size * aspect, -0.5f * size,
            0.5f * size * aspect, -0.5f * size
        };
        
        glVertexAttribPointer(program.positionAttribute, 2, GL_FLOAT, false, 0, vertices);
        glEnableVertexAttribArray(program.positionAttribute);
        
        glVertexAttribPointer(program.texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
        glEnableVertexAttribArray(program.texCoordAttribute);
        
        glDrawArrays(GL_TRIANGLES, 0, 6);
        glDisableVertexAttribArray(program.positionAttribute);
        glDisableVertexAttribArray(program.texCoordAttribute);
    }
    
    float size;
    unsigned int textureID;
    float u;
    float v;
    float width;
    float height;
};

float lerp(float v0, float v1, float t) {
    return (1.0-t)*v0 + t*v1;
}

class Entity {
public:
    Entity(const string& name) : name(name) {}
    
    void Update() {
        modelMatrix = glm::mat4(1.0f);
        modelMatrix = glm::translate(modelMatrix, glm::vec3(positionX, positionY, 0.0f));
        modelMatrix = glm::scale(modelMatrix, size);
    }
    
    void Draw(ShaderProgram program) {
        sprite.Draw(program);
    }
    
    string name;
    
    float positionX;
    float positionY;
    float width;
    float height;
    float rotation;
    
    int textureID;
    
    float velocityX;
    float velocityY;
    
    float accelerationX = 0.0f;
    float accelerationY = -0.1f; //gravity
    
    glm::vec3 size;
    
    glm::mat4 modelMatrix;
    
    SheetSprite sprite;
    
    bool isStatic;
    
    bool collidedTop;
    bool collidedBottom;
    bool collidedLeft;
    bool collidedRight;
};

GLuint LoadTexture(const char *filePath) {
    int w,h,comp;
    unsigned char* image = stbi_load(filePath, &w,  &h, &comp, STBI_rgb_alpha);
    
    if(image == NULL) {
        cout << "Unable to load image. Make sure the path is correct\n";
        assert(false);
    }
    
    GLuint retTexture;
    glGenTextures(1, &retTexture);
    
    glBindTexture(GL_TEXTURE_2D, retTexture);
    
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, image);
    
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    
    stbi_image_free(image);
    return retTexture;
}

void createEntity(const string& name, vector<Entity*>& entities) {
    Entity* entity = new Entity(name);
    entities.push_back(entity);
}

//----- MAIN -----//
int main(int argc, char *argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 360, SDL_WINDOW_OPENGL);
    SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
    SDL_GL_MakeCurrent(displayWindow, context);
    
    glViewport(0, 0, 640, 360);
    
    ShaderProgram program;
    program.Load("vertex.glsl", "fragment.glsl");
    program.Load("vertex_textured.glsl", "fragment_textured.glsl");
    
    glm::mat4 projectionMatrix = glm::mat4(1.0f);
    glm::mat4 viewMatrix = glm::mat4(1.0f);
    
    vector<Entity*> entities;
    createEntity("exit", entities);
    createEntity("player", entities);
    createEntity("platform1", entities);
    createEntity("platform2", entities);
    createEntity("platform3", entities);
    createEntity("platform4", entities);
    createEntity("platform5", entities);
    
    unsigned int spriteSheet1 = LoadTexture("cow.png");
    unsigned int spriteSheet2 = LoadTexture("platforms_sprites.png");
    
    //MODEL MATRICES
    float position = 0.0f;
    for (size_t i = 0; i < entities.size(); i++) {
        if (entities[i]->name.size() == 9) { //platformX is 9 char
            entities[i]->isStatic = false;
            entities[i]->positionX = -1.5f + position;
            entities[i]->positionY = -0.6f;
            entities[i]->size = glm::vec3(0.5f, 0.5f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet2, 9, 11, 13, 1);
            position += 1.0f;
        } else if (entities[i]->name.size() == 6) { //player
            entities[i]->isStatic = false;
            entities[i]->positionX = -1.5f;
            entities[i]->positionY = -0.2f; //high position, but collision will fix
            entities[i]->size = glm::vec3(0.6f, 0.6f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet1, 12, 4, 4, 1);
        } else if (entities[i]->name.size() == 4) { //exit sign
            entities[i]->isStatic = true;
            entities[i]->positionX = 2.5f;
            entities[i]->positionY = -0.2f;
            entities[i]->size = glm::vec3(0.3f, 0.35f, 0.0f);
            entities[i]->sprite = SheetSprite(spriteSheet2, 59, 11, 13, 1);
        }
        entities[i]->Update();
    }
    
    projectionMatrix = glm::ortho(-1.777f, 1.777f, -1.0f, 1.0f, -1.0f, 1.0f);
    
    glUseProgram(program.programID);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    
    float lastFrameTicks = 0.0f;
    
    const Uint8 *keys = SDL_GetKeyboardState(NULL);
    
    float viewPosStartX = -1.5f;
    float accumulator = 0.0f;
#ifdef _WINDOWS
    glewInit();
#endif
    
    SDL_Event event;
    bool done = false;
    while (!done) {
        float ticks = (float)SDL_GetTicks()/1000.0f;
        float elapsed = ticks - lastFrameTicks;
        lastFrameTicks = ticks;
        elapsed += accumulator;
        if(elapsed < FIXED_TIMESTEP) {
            accumulator = elapsed;
            continue;
        }
        while(elapsed >= FIXED_TIMESTEP) {
            elapsed -= FIXED_TIMESTEP;
        }
        accumulator = elapsed;
        
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
                done = true;
            }
        }
        if (event.type == SDL_KEYDOWN) {
            if (keys[SDL_SCANCODE_LEFT]) {
                if (entities[1]->positionX > -1.5f) {
                    entities[1]->accelerationX -= 0.01f;
                    entities[1]->velocityX += entities[1]->accelerationX;
                    
                    entities[1]->positionX -= elapsed*entities[1]->velocityX;
                    entities[1]->Update();
                    
                    if (entities[1]->positionX < (viewPosStartX+0.5f)) {
                        viewPosStartX = entities[1]->positionX - 0.5f;
                        viewMatrix = glm::translate(viewMatrix, glm::vec3(elapsed*entities[1]->velocityX, 0.0f, 0.0f));
                    }
                }
            }
            if (keys[SDL_SCANCODE_RIGHT]) {
                if (entities[1]->positionX < 2.25f) {
                    entities[1]->accelerationX += 0.01f;
                    entities[1]->velocityX += entities[1]->accelerationX;
                    
                    entities[1]->positionX += elapsed*entities[1]->velocityX;
                    entities[1]->Update();
                    
                    if (entities[1]->positionX > (viewPosStartX+0.5f)) {
                        viewPosStartX = entities[1]->positionX - 0.5f;
                        viewMatrix = glm::translate(viewMatrix, glm::vec3(-elapsed*entities[1]->velocityX, 0.0f, 0.0f));
                    }
                }
            }
            if (keys[SDL_SCANCODE_UP]) {
                entities[1]->velocityY += 0.5f;
                entities[1]->positionY += elapsed*entities[1]->velocityY;
                entities[1]->Update();
            }
        }
        if (entities[1]->velocityX > 0) {
            entities[1]->velocityX -= 0.01f;
        } else if (entities[1]->velocityX < 0) {
            entities[1]->velocityX += 0.01f;
        }
        
        glClear(GL_COLOR_BUFFER_BIT);
        
        program.SetProjectionMatrix(projectionMatrix);
        program.SetViewMatrix(viewMatrix);
        
        for (size_t i = 0; i < entities.size(); i++) {
            program.SetModelMatrix(entities[i]->modelMatrix);
            entities[i]->Draw(program);
        }
        
        if (!entities[1]->collidedBottom) {
            entities[1]->velocityY += entities[1]->accelerationY;
            entities[1]->positionY += elapsed*entities[1]->velocityY;
            entities[1]->Update();
        }
        
        //player and platforms
        for (size_t i = 0; i < entities.size(); i++) {
            if (entities[i]->name.size() == 9) { //platforms
                float platformTop = entities[3]->positionY;
                float playerBottom = entities[1]->positionY;
                if (((platformTop-playerBottom)/2 < 0) &&
                    (entities[1]->positionX < entities[i]->positionX+0.25f) &&
                    (entities[1]->positionX > entities[i]->positionX-0.25f)){
                    
                    entities[1]->velocityY = 0.0f;
                    
                    entities[1]->positionY = entities[i]->positionY+0.35f;
                    entities[1]->Update();
                    entities[1]->collidedBottom = true;
                    entities[i]->collidedTop = true;
                } else {
                    entities[1]->collidedBottom = false;
                    entities[i]->collidedTop = false;
                }
            }
        }
        
        SDL_GL_SwapWindow(displayWindow);
    }
    
    SDL_Quit();
    return 0;
}
